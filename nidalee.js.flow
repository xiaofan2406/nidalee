/* @flow */
/** ================ layouts ================ */
export type AsideProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `aside` attributes are supported

export type FooterProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `footer` attributes are supported

export type HeaderProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `header` attributes are supported

export type MainProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `main` attributes are supported

export type NavProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `nav` attributes are supported

export type NidaleeProps = {
  +children: React.Node,

  +className?: string,
}; // all other HTML `section` attributes are supported

export type SectionProps = {
  +appMain?: boolean,
  +children: React.Node,

  +className?: string,
}; // all other HTML `section` attributes are supported

/** ================ components ================ */
export type MenuDirection = 'vertical' | 'horizontal';
export type MenuProps = {
  +direction: MenuDirection,
  +children: React.Node,

  +className?: string,
}; // all other HTML `ul` attributes are supported
export type MenuDefaultProps = {|
  direction: MenuDirection,
|};
export type MenuState = {|
  activeItem: string,
|};

export type MenuItemProps = {
  +onActivate: (itemkey?: string) => void,
  +active: boolean,

  +itemKey?: string,
  +children?: React.Node,
  +onKeyDown?: (event: SyntheticKeyboardEvent<HTMLUListElement>) => void,
  +onClick?: (event: SyntheticMouseEvent<HTMLUListElement>) => void,
  +className?: string,
}; // all other HTML `li` attributes are supported

export type Size = 'small' | 'regular' | 'large';
export type ButtonProps = {
  +children: React$Node,

  +primary: boolean,
  +size: Size,
  +color: string,
  +showSpinner: boolean,

  +innerRef?: (ref: ?HTMLButtonElement) => void,
}; // all other HTML `button` attributes are supported
export type ButtonDefaultProps = {|
  +primary: boolean,
  +size: Size,
  +color: string,
  +showSpinner: boolean,
|};

// TODO list of all events
export type StandardEvent = string;

export type DialogPosition = 'top' | 'middle' | 'bottom';
export type DialogProps = {
  +opener: React$Node,
  +children: React$Node,

  +showOverlay: boolean,
  +trigger: StandardEvent,
  +position: DialogPosition,

  +open?: boolean,
  +onOpen?: () => void,
  +onClose?: () => void,
};
export type DialogDefaultProps = {|
  +trigger: StandardEvent,
  +showOverlay: boolean,
  +position: DialogPosition,
|};
export type DialogState = {|
  isOpen: boolean,
|};

export type PopoverAlign = 'left' | 'right';
export type PopoverDirection = 'top' | 'bottom';
export type PopoverProps = {
  +expander: React$Node,
  +children: React$Node,

  +trigger: StandardEvent,
  +align: PopoverAlign,
  +direction: PopoverDirection,
  +zIndex: number,

  +expand?: boolean,
  +onExpand?: () => void,
  +onCollapse?: () => void,
  +className?: string,
}; // all other HTML `div` attributes are supported
export type PopoverDefaultProps = {|
  +trigger: StandardEvent,
  +align: PopoverAlign,
  +direction: PopoverDirection,
  +zIndex: number,
|};
export type PopoverState = {|
  isExpanded: boolean,
|};

export type EditableAction = 'save' | 'cancel';
export type EditableProps = {
  +value: string,
  +onSave: (value: string) => void,

  +placeholder: string,
  +className: string,
  +autoTrim: boolean,
  +blurAction: EditableAction,
  +escAction: EditableAction,

  +onCancel?: () => void,
  +onKeyDown?: (event: KeyboardEvent) => void,
  +onBlur?: (event: FocusEvent) => void,
  +onDoubleClick?: (event: MouseEvent) => void,
}; // all other HTML `div` attributes are supported
export type EditableDefaultProps = {|
  +placeholder: string,
  +className: string,
  +autoTrim: boolean,
  +blurAction: EditableAction,
  +escAction: EditableAction,
|};
export type EditableState = {|
  isEditing: boolean,
|};

export type FAIconType = 'regular' | 'solid' | 'light' | 'brands';
export type IconProps = {
  +type: FAIconType,
  +name: string,
  +size: Size,

  +color?: string,
  +className?: string,
}; // all other HTML `i` attributes are supported
export type IconDefaultProps = {|
  +type: FAIconType,
  +name: string,
  +size: Size,
|};

export type InlineEditRender = (value: string) => React$Node;
export type InlineEditProps = {
  +value: string,
  +onSave: (value: string) => void,

  +render?: InlineEditRender,
  +className?: string,
  +onDoubleClick?: (event: SyntheticMouseEvent<HTMLSpanElement>) => void,
}; // all other HTML `span` attributes are supported
export type InlineEditState = {|
  isEditing: boolean,
|};

export type InlineEditInputProps = {
  +defaultValue: string,
  +onSave: (value: string) => void,
  +onCancel: () => void,

  +onKeyDown?: (event: SyntheticKeyboardEvent<HTMLInputElement>) => void,
  +onBlur?: (event: SyntheticFocusEvent<HTMLInputElement>) => void,
  +className?: string,
}; // all other HTML `input` attributes are supported

export type Tag = string; // TODO all valid html tag?
export type TooltipPosition = 'top' | 'left' | 'right' | 'bottom';
export type TooltipProps = {
  +content: string,
  +position: TooltipPosition,
  +tag: Tag,
  +children?: React.Node,
}; // all other HTML ${tag} attributes are supported
export type TooltipDefaultProps = {|
  position: TooltipPosition,
  tag: Tag,
|};

declare module 'nidalee' {
  declare export var Aside: React$StatelessFunctionalComponent<AsideProps>;
  declare export var Footer: React$StatelessFunctionalComponent<FooterProps>;
  declare export var Header: React$StatelessFunctionalComponent<HeaderProps>;
  declare export var Main: React$StatelessFunctionalComponent<MainProps>;
  declare export var Nav: React$StatelessFunctionalComponent<NavProps>;
  declare export var Nidalee: React$StatelessFunctionalComponent<NidaleeProps>;
  declare export var Section: React$StatelessFunctionalComponent<SectionProps>;

  declare class MenuItem extends React$PureComponent<MenuItemProps> {}
  declare export class Menu extends React$Component<MenuProps, MenuState> {
    static defaultProps: MenuDefaultProps;
    // Copy MenuItemProps because there are injected prop
    static Item: React$ComponentType<{
      +onActivate?: (itemkey?: string) => void,
      +active?: boolean,
      +itemKey?: string,
      +children?: React.Node,
      +onKeyDown?: (event: SyntheticKeyboardEvent<HTMLUListElement>) => void,
      +onClick?: (event: SyntheticMouseEvent<HTMLUListElement>) => void,
      +className?: string,
    }>;
  }

  declare export class Button extends React$Component<ButtonProps> {
    static defaultProps: ButtonDefaultProps;
  }

  declare export class Dialog extends React$Component<
    DialogProps,
    DialogState
  > {
    static defaultProps: DialogDefaultProps;
  }

  declare export class Editable extends React$Component<
    EditableProps,
    EditableState
  > {
    static defaultProps: EditableDefaultProps;
  }

  declare export class Icon extends React$Component<IconProps> {
    static defaultProps: IconDefaultProps;
  }

  declare export class InlineEdit extends React$Component<
    InlineEditProps,
    InlineEditState
  > {}

  declare export class Popover extends React$Component<
    PopoverProps,
    PopoverState
  > {
    static defaultProps: PopoverDefaultProps;
  }

  declare export class Tooltip extends React$Component<TooltipProps> {
    static defaultProps: TooltipDefaultProps;
  }
}
